{load_file("nrngui.hoc")}
{load_file("import3d.hoc")}

//////////////////////////////////////////////////////////////////
// Template for making a cell
begintemplate Cell
public soma, axon, dend, apic, nclist     
create soma[1], axon[1], dend[1], apic[1]
public all, somatic, axonal, basal, apical 
objref all, somatic, axonal, basal, apical

objectvar nclist

proc init() {
    all = new SectionList()
    somatic = new SectionList()
    axonal = new SectionList()
    basal = new SectionList()
    apical = new SectionList()
    nclist = new List()

	//Modify for oscillatory input from degenerated Aii cells
	//THIS DOESN'T WORK HENCE WHY IT IS COMMENTED OUT
	// soma[0] {
	// 	nseg = 1
	// 	// diam = 25
	// 	// L = 25
	// 	Ra = 150
	// 	insert pas
	// 	g_pas = 0.000025
	// 	e_pas = -50
	// 	insert AIIka
	// 	gkabar_AIIka = 0.004
	// }
}
endtemplate Cell

//////////////////////////////////////////////////////////////////
// Function for making a cell
obfunc mkcell() { localobj import, morph, cell
    cell = new Cell()
    morph = new Import3d_SWC_read()
    morph.input($s1)
    import = new Import3d_GUI(morph, 0)
    execute("forall delete_section()", cell)
    import.instantiate(cell)
    return cell
}

//////////////////////////////////////////////////////////////////
// Initiate parameters
objref CBC,GC,AC // list of cells
objref m,cell,strobj
strdef c,stmp,d

cnt = 0
NUMCELLS = 3
strobj = new StringFunctions()
GC = new List()
CBC = new List()
AC = new List()
objref vc[NUMCELLS]
objref ic[NUMCELLS]

// Open list of cell names and types
ropen("606celltypes.txt")

// Create 2D array to store cell names and their indices
m = new Matrix(NUMCELLS,2)

// Loop through array and create a cell for each
for(i=0;i<NUMCELLS;i=i+1) {
	// Get morphology filename for cell
	a = fscan()
	sprint(c,"%s%d%s","morphology/",a,".swc")
	
	// Get cell type
	getstr(stmp)
	print stmp

	// Add cell to list and add biophysics depending on type
	// --------------------------------------------------------------   GANGLION CELL  ---------------------------------------------------------------- //
	
	// if (strobj.substr(stmp,"GC ") > (-1)) {			
	// 	// Make Cell
	// 	cell = mkcell(c)
	// 	sprint(d,"%s%d%s","Cell[",cnt,"]")
		
	// 	print "GC: ", a, " Cell: ", cnt
		
	// 	forsec d {
	// 		insert pas
    //    		e_pas=-65
	// 		g_pas=0.0001
	// 		Ra=140
			
	// 		insert spike
    //    		gnabar_spike = 0.072
    //    		gkbar_spike = 0.0504
    //    		gabar_spike = 0
    //    		gcabar_spike = 0.00120
    //    		gkcbar_spike = 0.00005
			
    //    		celsius = 37
    //    		ena=35
    //    		ek=-75
    //    		insert cad
    //    		depth_cad = 3 // (micron)
    //    		taur_cad = 10 // (ms)
	// 	}
		
	// 	cnt = cnt + 1
		
	// 	// Add to list
	// 	GC.append(cell)
		
	// 	// Print cell name and index of list array
	// 	m.x[cnt-1][0] = cnt-1
	// 	m.x[cnt-1][1] = a
	// } 
	
// --------------------------------------------------------------   AMACRINE CELL  ---------------------------------------------------------------- 	// 
	print strobj.substr(stmp,"AC")
	if (strobj.substr(stmp,"AC")>(-1)){
		// Make cell
		cell = mkcell(c)
		sprint(d,"%s%d%s","Cell[",cnt,"]")
		
		print "AC: ", a, " Cell: ", cnt
		
		forsec d {
			insert pas
			insert HHna
			insert HHk

			//Modify to insert the oscillations from Aii cells
			insert AIIka
			insert AIIkm
			insert AIIna
			gkabar_AIIka = 0.08
		}
		
		cnt = cnt + 1	
		
		// Add to list
		AC.append(cell)
		
		// Print cell name and index of list array
		m.x[cnt-1][0] = cnt-1
		m.x[cnt-1][1] = a
	}

	
	
// --------------------------------------------------------------   CONE BIPOLAR CELL  ---------------------------------------------------------------- 	//  

	// if (strobj.substr(stmp,"AC")==(-1)){
	// 	if (strobj.substr(stmp,"CBb")>(-1) || strobj.substr(stmp,"Bip")>(-1) || strobj.substr(stmp,"BC")>(-1)) {	
	// 		// Make cell
	// 		cell = mkcell(c)
	// 		sprint(d,"%s%d%s","Cell[",cnt,"]")

	// 		print "BC: ", a, " Cell: ", cnt


	// 		forsec d {
	// 			insert pas
	// 			e_pas=-35
	// 			g_pas=.00008

	// 			insert cad
	// 			depth_cad = 0.025
	// 			taur_cad=0.8	
				
	// 		}	
			
	// 		cnt = cnt + 1	
			
		
	// 		// Add to list
	// 		CBC.append(cell)
			
	// 		// Print cell name and index of list array
	// 		m.x[cnt-1][0] = cnt-1
	// 		m.x[cnt-1][1] = a
	// 		NUM_BC = NUM_BC + 1
	// 	}
	// }
}
