objref tvec, vvec, datafile, m
objref veclist  // will hold all the stim Vectors and write vectors
strdef Vfile

NUMPTS = 180 //224//289
timestep = 1
tstop = 500
dt = 0.02
steps_per_ms = 50
v_init = -60
tmp_ap = 0

NUMSTEPS = 0 // # of compartments
tvec = new Vector(NUMPTS)

// Get number of compartments in entire model
forsec "Cell[" {
	NUMSTEPS = NUMSTEPS + nseg
}

// Open extracellular voltages file

//////////// TNSRE PAPER - Asymmetric waveform design /////////////////////////
Vfile = "voltage/AsymWaveform_P120_x280y190z25.v"
//////////////////////////////////////////////////////////////////////////////

// Set time vector 
// (each step is 2.5 ms (from 1/(20steps*20 Hz)) or 1 ms for biphasic pulses
for i=0,NUMPTS-1 {
	tvec.x[i] = i*timestep + 1
}

// Insert extracellular mechanism into all compartments
forall {
for(x,0) {
	insert extracellular
	}
}

// Setup vector to record voltage at the soma of 606 (Cell[21].soma[0])
vvec = new Vector()
// vvec.record(&Cell[21].soma[0].v(0.5))
vvec.record(&Cell[0].soma[0].v(0.5))

// Searches through a vector of voltages to see if there is an AP (Vm>0)
func check_ap(){  //check if there is any action potential or not
for i = 0,vvec.size()-1 {
	if(vvec.x(i)>10){
        return 1 // 1 means occurance of action potential
        }
}
return 0
}
// print "AP detected? ", check_ap()

//*****************************************************************************
// CUSTOM EXTRACELLULAR STIMULATION
//**************************************************************************

amp = 1
polarity = -1
rhoe=5e6 //[Ohm-um]  specific extracellular resistance
pi=3.141592654

//Electrode location
xelec=5000 // [um] electrode x-coordinate
yelec=-10000         //[um] electrode y-coordinate
zelec=5000	//[um] electrode z-coordinate
//Define Electrode dimensions
create electrode
electrode.diam= 10
electrode.L = 50 

// objref Vext, X, y, z, exIClmp
objref Vext, X, y, z
objectvar exIClmp
Vext=new Vector(11,0)    //extracellular voltage applied to nodes
X=new Vector(11,0)       //x-coordinate for all the nodes
y=new Vector(11,0) 	//y-coordinate for all the nodes
z=new Vector(11,0)	//z-coordinate for all the nodes
deltax = (32/11)
proc xypos(){
	X.x[0]=(32/2)	//using dend
	y.x[0]=0
	z.x[0]= 0
	for i=1, 2-1 {
		X.x[i]=X.x[i-1]+deltax
		y.x[i]=0
		z.x[i]=0
		// print "node ", i, " x=", X.x[i], " y=", y.x[i], " z=", z.x[i]
	}
}	

proc volt(){
	xypos()
	for k=0, 1 {
		r = sqrt((zelec-z.x[k])^2 + (yelec-y.x[k])^2 + (xelec-X.x[k])^2)  //[um] distance from electrode
		I = polarity*amp
		Vext.x[k]=(I*rhoe)/(4*pi*r)   //[mV]
		// print Vext.x[k]
	}
}

//extracellular stimulus
//electrode is a dummy compartment that holds exIClmp
proc stimul() {
	volt()
	electrode{
		//Single Step Stimulation
		// exIClmp=new IClamp()
		// exIClmp.loc(.5)
		// exIClmp.del=100
		// exIClmp.dur=5
		// exIClmp.amp=amp		

		//Pulse Stimulation
		//NOTE: To graph-->plot what?-->type exIClmp.i
		exIClmp=new Ipulse1()
		exIClmp.loc(.5)
		exIClmp.del = 1
		exIClmp.ton=50
		exIClmp.toff=10
		exIClmp.num = 6
		exIClmp.amp=amp
	}
}

// assign e_extracellular to each node
// when stimulus is off, e_extracellular = 0, when it is on, e_extracellular is Vext
proc advance(){
	for k=0, 2 {
		//Using 3-Compartment Model from make_aii.hoc
		// cell_aii.dend[k] e_extracellular(0.5) = (exIClmp.i)*Vext.x[k]	//[mV]

		//Using Morphological AC Cell
		Cell[k].soma[0] e_extracellular(0.5) = (exIClmp.i)*Vext.x[k]	//[mV]
		Cell[k].dend[0] e_extracellular(0.5) = (exIClmp.i)*Vext.x[k]	//[mV]
		Cell[k].dend[1] e_extracellular(0.5) = (exIClmp.i)*Vext.x[k]	//[mV]
	}
	fadvance()
}

topology()
stimul()

//**************************************************************************************
//END OF CUSTOM EXTRACELLULAR STIMULATION
//**************************************************************************************

//**************************************************************************************
//ORIGINAL ASYMMETRIC BIPHASIC WAVEFORM STIMULATION
//COMMENT OUT THE CUSTOM EXTRACELLULAR STIMULATION AND UNCOMMENT THIS SECTION FOR BIPHASIC
//STIMULATION
//*************************************************************************************
// // Setup stimulation - apply extracellular stimulation
// proc setstim() { localobj tmpvec, dfile, ma
//   dfile = new File()
//   dfile.ropen(Vfile)
//   ma = new Matrix() 
//   ma.scanf(dfile,NUMPTS,NUMSTEPS)
  
//   rindex=0
//   veclist = new List()
//   forsec "Cell[" { 
//     for (x, 0) {  // iterate over internal nodes only
//       tmpvec = ma.getcol(rindex)
      
//       //scale extracellular voltage
//       tmpvec = tmpvec.mul(0.85)
//       tmpvec.play(&e_extracellular(x), tvec)
//       veclist.append(tmpvec)
//       rindex = rindex + 1
//     }
//   }
// }
// setstim()
//**************************************************************************************
//END OF BIPHASIC STIMULATION
//**************************************************************************************

run()

//**************************************************************************************
//BELOW IS CODE TO RECORD AND STORE DATA TO A FILE
//NOT CURRENTLY IN USE AND VERY DISORGANIZED
//IGNORE THE SECTION BELOW
//**************************************************************************************

// objref f1
// f1 = new File("trial_custom_stimulus2.txt")
// f1.aopen("trial_custom_stimulus2.txt")
// for i = 0, 499 {
// 	f1.printf("%8.8f ", Cell[0].soma[0].v(i))
// }
// f1.close()

// // Set variables
// objref tvecw, seclist, veclistw // will hold all the stim Vectors and write vectors
// i = 0
// j = 0

// // Capture data
// tvecw = new Vector()
// veclistw = new List()
// tvecw.record(&t)

// // Create vectors for recording the voltage at the middle of each segment and the endpoint coordinates
// objref tmpvec2

// forall { 
// 	tmpvec2 = new Vector()
//     tmpvec2.record(&v(0.5))
// 	// print tmpvec2.record(&v(0.5))
// 	veclistw.append(tmpvec2)
// }

// // // Run the simulation
// run()


// Function for writing the values to file (implemented below)
// proc vtofile() { local i localobj tfil
// 	// Open the file
// 	if (strcmp($s4,"soma") == 0) {
// 		print "writing to ", $s3
// 		tfil = new File()
// 		tfil.wopen($s3)
// 	} else {
// 		tfil = new File()
// 		tfil.aopen($s3)
// 	}
	
	// Print the data
// 	for i=0,$o1.size()-1 tfil.printf("%8.8f\t%8.8f\n", $o1.x[i], $o2.x[i])

// 	tfil.close()
// }

// Print all the voltages to file
// objref tfil

// tmp_ind = tvecw.size()

// i = 0

// forall {
// 	if (strcmp(secname(),"CellAii[0].soma") == 0 ){
// 	print "Writing output for "
// 		print secname()	
// 		tfil = new File()
// 		//		tfil.aopen("SingleBC_AiiOsc_CellAii0.txt")
// 		tfil.aopen("TwentyBC_AiiOsc_CellAii0_Asym.txt")
// 		for j=0,tmp_ind-1 tfil.printf("%8.8f\t%8.8f\n", tvecw.x[j], veclistw.o(i).x[j])
// 		tfil.close()
// 	}
// 	i = i + 1
// }

// forall {	
// 	if (strcmp(secname(),"Cell[2].soma[0]") == 0 ){	
// 		print "Writing output for "
// 		print secname()
// 		tfil = new File()
// //		tfil.aopen("SingleBC_AiiOsc_Cell2.txt")
// 		tfil.aopen("TwentyBC_AiiOsc_Cell2_Asym.txt")
// 		for j=0,tmp_ind-1 tfil.printf("%8.8f\t%8.8f\n", tvecw.x[j], veclistw.o(i).x[j])
// 		tfil.close()
// 	}
	
// 	if (strcmp(secname(),"Cell[21].soma[0]") == 0 ){	
// 		print "Writing output for "
// 		print secname()
// 		tfil = new File()
// //		tfil.aopen("SingleBC_AiiOsc_Cell21.txt")
// 		tfil.aopen("TwentyBC_AiiOsc_Cell21_Asym.txt")
// 		for j=0,tmp_ind-1 tfil.printf("%8.8f\t%8.8f\n", tvecw.x[j], veclistw.o(i).x[j])
// 		tfil.close()	
// 	}
	
// 	if (strcmp(secname(),"CellAii[0].soma") == 0 ){
// 		print "Writing output for "
// 		print secname()	
// 		tfil = new File()
// //		tfil.aopen("SingleBC_AiiOsc_CellAii0.txt")
// 		tfil.aopen("TwentyBC_AiiOsc_CellAii0_Asym.txt")
// 		for j=0,tmp_ind-1 tfil.printf("%8.8f\t%8.8f\n", tvecw.x[j], veclistw.o(i).x[j])
// 		tfil.close()		
// 	}


// 	i = i + 1
// }